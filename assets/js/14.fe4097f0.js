(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{168:function(e,n,o){"use strict";o.r(n);var t=o(28),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("基础使用\n// 定义一个 Eloquent 模型\nclass User extends Model {}\n// 生成一个 Eloquent 模型\nphp artisan make:model User\n// 生成一个 Eloquent 模型的时候，顺便生成迁移文件\nphp artisan make:model User --migration OR -m\n// 生成一个 Eloquent 模型的时候，顺便生成迁移文件、控制器（或资源控制器）\nphp artisan make:model User -mc[r]\n// 指定一个自定义的数据表名称\nclass User extends Model {\nprotected $table = 'my_users';\n}\nMore\nModel::create(array('key' => 'value'));\n// 通过属性找到第一条相匹配的数据或创造一条新数据\nModel::firstOrCreate(array('key' => 'value'));\n// 通过属性找到第一条相匹配的数据或实例化一条新数据\nModel::firstOrNew(array('key' => 'value'));\n// 通过属性找到相匹配的数据并更新，如果不存在即创建\nModel::updateOrCreate(array('search_key' => 'search_value'), array('key' => 'value'));\n// 使用属性的数组来填充一个模型, 用的时候要小心「Mass Assignment」安全问题 !\nModel::fill($attributes);\nModel::destroy(1);\nModel::all();\nModel::find(1);\n// 使用双主键进行查找\nModel::find(array('first', 'last'));\n// 查找失败时抛出异常\nModel::findOrFail(1);\n// 使用双主键进行查找, 失败时抛出异常\nModel::findOrFail(array('first', 'last'));\nModel::where('foo', '=', 'bar')->get();\nModel::where('foo', '=', 'bar')->first();\nModel::where('foo', '=', 'bar')->exists();\n// 动态属性查找\nModel::whereFoo('bar')->first();\n// 查找失败时抛出异常\nModel::where('foo', '=', 'bar')->firstOrFail();\nModel::where('foo', '=', 'bar')->count();\nModel::where('foo', '=', 'bar')->delete();\n// 输出原始的查询语句\nModel::where('foo', '=', 'bar')->toSql();\nModel::whereRaw('foo = bar and cars = 2', array(20))->get();\nModel::on('connection-name')->find(1);\nModel::with('relation')->get();\nModel::all()->take(10);\nModel::all()->skip(10);\n// 默认的 Eloquent 排序是上升排序\nModel::all()->orderBy('column');\nModel::all()->orderBy('column','desc');\n// 查询 json 数据\nModel::where('options->language', 'en')->get(); # 字段是字符串\nModel::whereJsonContains('options->languages', 'en')->get(); # 字段是数组\nModel::whereJsonLength('options->languages', 0)->get(); # 字段长度为 0\nModel::whereJsonDoesntContain('options->languages', 'en')->get(); # 字段是数组, 不包含\n软删除\nModel::withTrashed()->where('cars', 2)->get();\n// 在查询结果中包括带被软删除的模型\nModel::withTrashed()->where('cars', 2)->restore();\nModel::where('cars', 2)->forceDelete();\n// 查找只带有软删除的模型\nModel::onlyTrashed()->where('cars', 2)->get();\n模型关联\n// 一对一 - User::phone()\nreturn $this->hasOne('App\\Phone', 'foreign_key', 'local_key');\n// 一对一 - Phone::user(), 定义相对的关联\nreturn $this->belongsTo('App\\User', 'foreign_key', 'other_key');")]),e._v(" "),o("p",[e._v("// 一对多 - Post::comments()\nreturn $this->hasMany('App\\Comment', 'foreign_key', 'local_key');\n//  一对多 - Comment::post()\nreturn $this->belongsTo('App\\Post', 'foreign_key', 'other_key');")]),e._v(" "),o("p",[e._v("// 多对多 - User::roles();\nreturn $this->belongsToMany('App\\Role', 'user_roles', 'user_id', 'role_id');\n// 多对多 - Role::users();\nreturn $this->belongsToMany('App\\User');\n// 多对多 - Retrieving Intermediate Table Columns\n$role->pivot->created_at;\n// 多对多 - 中介表字段\nreturn $this->belongsToMany('App\\Role')->withPivot('column1', 'column2');\n// 多对多 - 自动维护 created_at 和 updated_at 时间戳\nreturn $this->belongsToMany('App\\Role')->withTimestamps();")]),e._v(" "),o("p",[e._v("// 远层一对多 - Country::posts(), 一个 Country 模型可能通过中介的 Users\n// 模型关联到多个 Posts 模型(User::country_id)\nreturn $this->hasManyThrough('App\\Post', 'App\\User', 'country_id', 'user_id');")]),e._v(" "),o("p",[e._v("// 多态关联 - Photo::imageable()\nreturn $this->morphTo();\n// 多态关联 - Staff::photos()\nreturn $this->morphMany('App\\Photo', 'imageable');\n// 多态关联 - Product::photos()\nreturn $this->morphMany('App\\Photo', 'imageable');\n// 多态关联 - 在 AppServiceProvider 中注册你的「多态对照表」\nRelation::morphMap([\n'Post' => App\\Post::class,\n'Comment' => App\\Comment::class,\n]);")]),e._v(" "),o("p",[e._v("// 多态多对多关联 - 涉及数据库表: posts,videos,tags,taggables\n// Post::tags()\nreturn $this->morphToMany('App\\Tag', 'taggable');\n// Video::tags()\nreturn $this->morphToMany('App\\Tag', 'taggable');\n// Tag::posts()\nreturn $this->morphedByMany('App\\Post', 'taggable');\n// Tag::videos()\nreturn $this->morphedByMany('App\\Video', 'taggable');")]),e._v(" "),o("p",[e._v("// 查找关联\n$user->posts()->where('active', 1)->get();\n// 获取所有至少有一篇评论的文章...\n$posts = App\\Post::has('comments')->get();\n// 获取所有至少有三篇评论的文章...\n$posts = Post::has('comments', '>=', 3)->get();\n// 获取所有至少有一篇评论被评分的文章...\n$posts = Post::has('comments.votes')->get();\n// 获取所有至少有一篇评论相似于 foo% 的文章\n$posts = Post::whereHas('comments', function ($query) {\n$query->where('content', 'like', 'foo%');\n})->get();")]),e._v(" "),o("p",[e._v("// 预加载\n$books = App\\Book::with('author')->get();\n$books = App\\Book::with('author', 'publisher')->get();\n$books = App\\Book::with('author.contacts')->get();")]),e._v(" "),o("p",[e._v("// 延迟预加载\n$books->load('author', 'publisher');")]),e._v(" "),o("p",[e._v("// 写入关联模型\n$comment = new App\\Comment(['message' => 'A new comment.']);\n$post->comments()->save($comment);\n// Save 与多对多关联\n$post->comments()->saveMany([\nnew App\\Comment(['message' => 'A new comment.']),\nnew App\\Comment(['message' => 'Another comment.']),\n]);\n$post->comments()->create(['message' => 'A new comment.']);")]),e._v(" "),o("p",[e._v("// 更新「从属」关联\n$user->account()->associate($account);\n$user->save();\n$user->account()->dissociate();\n$user->save();")]),e._v(" "),o("p",[e._v("// 附加多对多关系\n$user->roles()->attach($roleId);\n$user->roles()->attach($roleId, ['expires' => $expires]);\n// 从用户上移除单一身份...\n$user->roles()->detach($roleId);\n// 从用户上移除所有身份...\n$user->roles()->detach();\n$user->roles()->detach([1, 2, 3]);\n$user->roles()->attach([1 => ['expires' => $expires], 2, 3]);")]),e._v(" "),o("p",[e._v("// 任何不在给定数组中的 IDs 将会从中介表中被删除。\n$user->roles()->sync([1, 2, 3]);\n// 你也可以传递中介表上该 IDs 额外的值：\n$user->roles()->sync([1 => ['expires' => true], 2, 3]);\n事件\nModel::retrieved(function($model){});\nModel::creating(function($model){});\nModel::created(function($model){});\nModel::updating(function($model){});\nModel::updated(function($model){});\nModel::saving(function($model){});\nModel::saved(function($model){});\nModel::deleting(function($model){});\nModel::deleted(function($model){});\nModel::restoring(function($model){});\nModel::restored(function($model){});\nModel::observe(new FooObserver);\nEloquent 配置信息\n// 关闭模型插入或更新操作引发的 「mass assignment」异常\nEloquent::unguard();\n// 重新开启「mass assignment」异常抛出功能\nEloquent::reguard()")])])}),[],!1,null,null,null);n.default=s.exports}}]);