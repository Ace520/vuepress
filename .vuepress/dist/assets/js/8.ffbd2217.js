(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{162:function(r,n,e){"use strict";e.r(n);var a=e(28),t=Object(a.a)({},(function(){var r=this,n=r.$createElement,e=r._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[r._v("composer create-project laravel/laravel folder"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("name\r\ncomposer create-project laravel/laravel folder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v('name --prefer-dist "5.8.*"\r\ncomposer install\r\ncomposer install --prefer-dist\r\ncomposer update\r\ncomposer update package/name\r\ncomposer dump-autoload [--optimize]\r\ncomposer self-update\r\ncomposer require '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("options")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--")]),r._v("]")]),r._v(" [vendor/packages]...\r\n// 全局安装\r\ncomposer require global vendor/packages\r\n// 罗列所有扩展包括版本信息\r\ncomposer show")])])]),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[r._v("基础使用 \r\n// 定义一个 Eloquent 模型\r\nclass User extends Model {}\r\n// 生成一个 Eloquent 模型\r\nphp artisan make:model User\r\n// 生成一个 Eloquent 模型的时候，顺便生成迁移文件\r\nphp artisan make:model User --migration OR -m\r\n// 生成一个 Eloquent 模型的时候，顺便生成迁移文件、控制器（或资源控制器）\r\nphp artisan make:model User -mc[r]\r\n// 指定一个自定义的数据表名称\r\nclass User extends Model {\r\n  protected $table = 'my"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("users';\r\n}\r\nMore\r\nModel::create(array('key' => 'value'));\r\n// 通过属性找到第一条相匹配的数据或创造一条新数据\r\nModel::firstOrCreate(array('key' => 'value'));\r\n// 通过属性找到第一条相匹配的数据或实例化一条新数据\r\nModel::firstOrNew(array('key' => 'value'));\r\n// 通过属性找到相匹配的数据并更新，如果不存在即创建\r\nModel::updateOrCreate(array('search")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("key' => 'search"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("value'), array('key' => 'value'));\r\n// 使用属性的数组来填充一个模型, 用的时候要小心「Mass Assignment」安全问题 !\r\nModel::fill($attributes);\r\nModel::destroy(1);\r\nModel::all();\r\nModel::find(1);\r\n// 使用双主键进行查找\r\nModel::find(array('first', 'last'));\r\n// 查找失败时抛出异常\r\nModel::findOrFail(1);\r\n// 使用双主键进行查找, 失败时抛出异常\r\nModel::findOrFail(array('first', 'last'));\r\nModel::where('foo', '=', 'bar')->get();\r\nModel::where('foo', '=', 'bar')->first();\r\nModel::where('foo', '=', 'bar')->exists();\r\n// 动态属性查找\r\nModel::whereFoo('bar')->first();\r\n// 查找失败时抛出异常\r\nModel::where('foo', '=', 'bar')->firstOrFail();\r\nModel::where('foo', '=', 'bar')->count();\r\nModel::where('foo', '=', 'bar')->delete();\r\n// 输出原始的查询语句\r\nModel::where('foo', '=', 'bar')->toSql();\r\nModel::whereRaw('foo = bar and cars = 2', array(20))->get();\r\nModel::on('connection-name')->find(1);\r\nModel::with('relation')->get();\r\nModel::all()->take(10);\r\nModel::all()->skip(10);\r\n// 默认的 Eloquent 排序是上升排序\r\nModel::all()->orderBy('column');\r\nModel::all()->orderBy('column','desc');\r\n// 查询 json 数据\r\nModel::where('options->language', 'en')->get(); # 字段是字符串\r\nModel::whereJsonContains('options->languages', 'en')->get(); # 字段是数组\r\nModel::whereJsonLength('options->languages', 0)->get(); # 字段长度为 0\r\nModel::whereJsonDoesntContain('options->languages', 'en')->get(); # 字段是数组, 不包含\r\n软删除 \r\nModel::withTrashed()->where('cars', 2)->get();\r\n// 在查询结果中包括带被软删除的模型\r\nModel::withTrashed()->where('cars', 2)->restore();\r\nModel::where('cars', 2)->forceDelete();\r\n// 查找只带有软删除的模型\r\nModel::onlyTrashed()->where('cars', 2)->get();\r\n模型关联\r\n// 一对一 - User::phone()\r\nreturn $this->hasOne('App\\Phone', 'foreign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("key', 'local"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("key');\r\n// 一对一 - Phone::user(), 定义相对的关联\r\nreturn $this->belongsTo('App\\User', 'foreign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("key', 'other_key');\r\n\r\n// 一对多 - Post::comments()\r\nreturn $this->hasMany('App\\Comment', 'foreign"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("key', 'local")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("key');\r\n//  一对多 - Comment::post()\r\nreturn $this->belongsTo('App\\Post', 'foreign"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("key', 'other")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("key');\r\n\r\n// 多对多 - User::roles();\r\nreturn $this->belongsToMany('App\\Role', 'user"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("roles', 'user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("id', 'role"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("id');\r\n// 多对多 - Role::users();\r\nreturn $this->belongsToMany('App\\User');\r\n// 多对多 - Retrieving Intermediate Table Columns\r\n$role->pivot->created")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("at;\r\n// 多对多 - 中介表字段\r\nreturn $this->belongsToMany('App\\Role')->withPivot('column1', 'column2');\r\n// 多对多 - 自动维护 created"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("at 和 updated")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("at 时间戳\r\nreturn $this->belongsToMany('App\\Role')->withTimestamps();\r\n\r\n// 远层一对多 - Country::posts(), 一个 Country 模型可能通过中介的 Users\r\n// 模型关联到多个 Posts 模型(User::country"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("id)\r\nreturn $this->hasManyThrough('App\\Post', 'App\\User', 'country")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("id', 'user_id');\r\n\r\n// 多态关联 - Photo::imageable()\r\nreturn $this->morphTo();\r\n// 多态关联 - Staff::photos()\r\nreturn $this->morphMany('App\\Photo', 'imageable');\r\n// 多态关联 - Product::photos()\r\nreturn $this->morphMany('App\\Photo', 'imageable');\r\n// 多态关联 - 在 AppServiceProvider 中注册你的「多态对照表」\r\nRelation::morphMap([\r\n"),e("span",{pre:!0,attrs:{class:"token code keyword"}},[r._v("    'Post' => App\\Post::class,\r\n    'Comment' => App\\Comment::class,")]),r._v("\r\n]);\r\n\r\n// 多态多对多关联 - 涉及数据库表: posts,videos,tags,taggables\r\n// Post::tags()\r\nreturn $this->morphToMany('App\\Tag', 'taggable');\r\n// Video::tags()\r\nreturn $this->morphToMany('App\\Tag', 'taggable');\r\n// Tag::posts()\r\nreturn $this->morphedByMany('App\\Post', 'taggable');\r\n// Tag::videos()\r\nreturn $this->morphedByMany('App\\Video', 'taggable');\r\n\r\n// 查找关联\r\n$user->posts()->where('active', 1)->get();\r\n// 获取所有至少有一篇评论的文章...\r\n$posts = App\\Post::has('comments')->get();\r\n// 获取所有至少有三篇评论的文章...\r\n$posts = Post::has('comments', '>=', 3)->get();\r\n// 获取所有至少有一篇评论被评分的文章...\r\n$posts = Post::has('comments.votes')->get();\r\n// 获取所有至少有一篇评论相似于 foo% 的文章\r\n$posts = Post::whereHas('comments', function ($query) {\r\n"),e("span",{pre:!0,attrs:{class:"token code keyword"}},[r._v("    $query->where('content', 'like', 'foo%');")]),r._v("\r\n})->get();\r\n\r\n// 预加载\r\n$books = App\\Book::with('author')->get();\r\n$books = App\\Book::with('author', 'publisher')->get();\r\n$books = App\\Book::with('author.contacts')->get();\r\n\r\n// 延迟预加载\r\n$books->load('author', 'publisher');\r\n\r\n// 写入关联模型\r\n$comment = new App\\Comment(['message' => 'A new comment.']);\r\n$post->comments()->save($comment);\r\n// Save 与多对多关联\r\n$post->comments()->saveMany([\r\n"),e("span",{pre:!0,attrs:{class:"token code keyword"}},[r._v("    new App\\Comment(['message' => 'A new comment.']),\r\n    new App\\Comment(['message' => 'Another comment.']),")]),r._v("\r\n]);\r\n$post->comments()->create(['message' => 'A new comment.']);\r\n\r\n// 更新「从属」关联\r\n$user->account()->associate($account);\r\n$user->save();\r\n$user->account()->dissociate();\r\n$user->save();\r\n\r\n// 附加多对多关系\r\n$user->roles()->attach($roleId);\r\n$user->roles()->attach($roleId, ['expires' => $expires]);\r\n// 从用户上移除单一身份...\r\n$user->roles()->detach($roleId);\r\n// 从用户上移除所有身份...\r\n$user->roles()->detach();\r\n$user->roles()->detach([1, 2, 3]);\r\n$user->roles()->attach([1 => ['expires' => $expires], 2, 3]);\r\n\r\n// 任何不在给定数组中的 IDs 将会从中介表中被删除。\r\n$user->roles()->sync([1, 2, 3]);\r\n// 你也可以传递中介表上该 IDs 额外的值：\r\n$user->roles()->sync([1 => ['expires' => true], 2, 3]);\r\n事件\r\nModel::retrieved(function($model){});\r\nModel::creating(function($model){});\r\nModel::created(function($model){});\r\nModel::updating(function($model){});\r\nModel::updated(function($model){});\r\nModel::saving(function($model){});\r\nModel::saved(function($model){});\r\nModel::deleting(function($model){});\r\nModel::deleted(function($model){});\r\nModel::restoring(function($model){});\r\nModel::restored(function($model){});\r\nModel::observe(new FooObserver);\r\nEloquent 配置信息\r\n// 关闭模型插入或更新操作引发的 「mass assignment」异常\r\nEloquent::unguard();\r\n// 重新开启「mass assignment」异常抛出功能\r\nEloquent::reguard()")])])]),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[e("span",{pre:!0,attrs:{class:"token code"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("```")]),e("span",{pre:!0,attrs:{class:"token code-language"}},[r._v(" php")]),r._v("\r\n"),e("span",{pre:!0,attrs:{class:"token code-block language-php"}},[r._v("注：数组和字串函数将在 5.9 全面废弃，推荐使用 Arr 和 Str Facade\r\n\r\n数组 & 对象\r\n// 如果给定的键不存在于该数组，Arr::add 函数将给定的键值对加到数组中\r\nArr::add(['name' => 'Desk'], 'price', 100); \r\n// >>> ['name' => 'Desk', 'price' => 100]\r\n// 将数组的每一个数组折成单一数组\r\nArr::collapse([[1, 2, 3], [4, 5, 6]]);  \r\n// >>> [1, 2, 3, 4, 5, 6]\r\n// 函数返回两个数组，一个包含原本数组的键，另一个包含原本数组的值\r\nArr::divide(['key1' => 'val1', 'key2' =>'val2'])\r\n// >>> [[\"key1\",\"key2\"],[\"val1\",\"val2\"]]\r\n// 把多维数组扁平化成一维数组，并用「点」式语法表示深度\r\nArr::dot($array);\r\n// 从数组移除给定的键值对\r\nArr::except($array, array('key'));\r\n// 返回数组中第一个通过为真测试的元素\r\nArr::first($array, function($key, $value){}, $default);\r\n// 将多维数组扁平化成一维\r\n // ['Joe', 'PHP', 'Ruby'];\r\nArr::flatten(['name' => 'Joe', 'languages' => ['PHP', 'Ruby']]);\r\n// 以「点」式语法从深度嵌套数组移除给定的键值对\r\nArr::forget($array, 'foo');\r\nArr::forget($array, 'foo.bar');\r\n// 使用「点」式语法从深度嵌套数组取回给定的值\r\nArr::get($array, 'foo', 'default');\r\nArr::get($array, 'foo.bar', 'default');\r\n// 使用「点」式语法检查给定的项目是否存在于数组中\r\nArr::has($array, 'products.desk');\r\n// 从数组返回给定的键值对\r\nArr::only($array, array('key'));\r\n// 从数组拉出一列给定的键值对\r\nArr::pluck($array, 'key');\r\n// 从数组移除并返回给定的键值对\r\nArr::pull($array, 'key');\r\n// 使用「点」式语法在深度嵌套数组中写入值\r\nArr::set($array, 'key', 'value');\r\nArr::set($array, 'key.subkey', 'value');\r\n// 借由给定闭包结果排序数组\r\nArr::sort($array, function(){});\r\n// 使用 sort 函数递归排序数组\r\nArr::sortRecursive();\r\n// 使用给定的闭包过滤数组\r\nArr::where();\r\n// 数组\"洗牌\"\r\nArr::shuffle($array,'I-AM-GROOT');\r\n// 数组包裹(如果不是数组，就变成数组，如果是空的，返回[],否则返回原数据）\r\nArr::wrap($array);\r\n// 返回给定数组的第一个元素\r\nhead($array);\r\n// 返回给定数组的最后一个元素\r\nlast($array);\r\n路径\r\n// 取得 app 文件夹的完整路径\r\napp_path();\r\n// 取得项目根目录的完整路径\r\nbase_path();\r\n// 取得应用配置目录的完整路径\r\nconfig_path();\r\n// 取得应用数据库目录的完整路径\r\ndatabase_path();\r\n// 取得加上版本号的 Elixir 文件路径\r\nelixir();\r\n// 取得 public 目录的完整路径\r\npublic_path();\r\n// 取得 storage 目录的完整路径\r\nstorage_path();\r\n字符串\r\n// 将给定的字符串转换成 驼峰式命名\r\nStr::camel($value);\r\n// 返回不包含命名空间的类名称\r\nclass_basename($class);\r\nclass_basename($object);\r\n// 对给定字符串运行 htmlentities\r\ne('<html>');\r\n// 判断字符串开头是否为给定内容\r\nStr::startsWith('Foo bar.', 'Foo');\r\n// 判断给定字符串结尾是否为指定内容\r\nStr::endsWith('Foo bar.', 'bar.');\r\n// 将给定的字符串转换成 蛇形命名\r\nStr::snake('fooBar');\r\n// 将给定字符串转换成「首字大写命名」: FooBar\r\nStr::studly('foo_bar');\r\n// 根据你的本地化文件翻译给定的语句\r\ntrans('foo.bar');\r\n// 根据后缀变化翻译给定的语句\r\ntrans_choice('foo.bar', $count);\r\nURLs and Links\r\n// 产生给定控制器行为网址\r\naction('FooController@method', $parameters);\r\n// 根据目前请求的协定（HTTP 或 HTTPS）产生资源文件网址\r\nasset('img/photo.jpg', $title, $attributes);\r\n// 根据 HTTPS 产生资源文件网址\r\nsecure_asset('img/photo.jpg', $title, $attributes);\r\n// 产生给定路由名称网址\r\nroute($route, $parameters, $absolute = true);\r\n// 产生给定路径的完整网址\r\nurl('path', $parameters = array(), $secure = null);\r\n其他\r\n// 返回一个认证器实例。你可以使用它取代 Auth facade\r\nauth()->user();\r\n// 产生一个重定向回应让用户回到之前的位置\r\nback();\r\n// 使用 Bcrypt 哈希给定的数值。你可以使用它替代 Hash facade\r\nbcrypt('my-secret-password');\r\n// 从给定的项目产生集合实例\r\ncollect(['taylor', 'abigail']);\r\n// 取得设置选项的设置值\r\nconfig('app.timezone', $default);\r\n// 产生包含 CSRF 令牌内容的 HTML 表单隐藏字段\r\n{!! csrf_field() !!} \r\n// 5.7+用这个\r\n@csrf\r\n// 取得当前 CSRF 令牌的内容\r\n$token = csrf_token();\r\n// 输出给定变量并结束脚本运行\r\ndd($value);\r\n// var_dump缩写（如果用dump-server,var_dump可能无效）\r\ndump($value);\r\n// 取得环境变量值或返回默认值\r\n$env = env('APP_ENV');\r\n$env = env('APP_ENV', 'production');\r\n// 配送给定事件到所属的侦听器\r\nevent(new UserRegistered($user));\r\n// 根据给定类、名称以及总数产生模型工厂建构器\r\n$user = factory(App\\User::class)->make();\r\n// 产生拟造 HTTP 表单动作内容的 HTML 表单隐藏字段\r\n{!! method_field('delete') !!}\r\n// 5.7+\r\n@method('delete')\r\n// 取得快闪到 session 的旧有输入数值\r\n$value = old('value');\r\n$value = old('value', 'default');\r\n// 返回重定向器实例以进行 重定向\r\n return redirect('/home');\r\n// 取得目前的请求实例或输入的项目\r\n$value = request('key', $default = null)\r\n// 创建一个回应实例或获取一个回应工厂实例\r\nreturn response('Hello World', 200, $headers);\r\n// 可被用于取得或设置单一 session 内容\r\n$value = session('key');\r\n// 在没有传递参数时，将返回 session 实例\r\n$value = session()->get('key');\r\nsession()->put('key', $value);\r\n// 返回给定数值\r\nvalue(function(){ return 'bar'; });\r\n// 取得视图 实例\r\nreturn view('auth.login');\r\n// 返回给定的数值\r\n$value = with(new Foo)->work();")]),r._v("\r\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("```")])])])])]),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[r._v("// 针对命令显示帮助信息\r\nphp artisan --help OR -h\r\n// 抑制输出信息\r\nphp artisan --quiet OR -q\r\n// 打印 Laravel 的版本信息\r\nphp artisan --version OR -V\r\n// 不询问任何交互性的问题\r\nphp artisan --no-interaction OR -n\r\n// 强制输出 ANSI 格式\r\nphp artisan --ansi\r\n// 禁止输出 ANSI 格式\r\nphp artisan --no-ansi\r\n// 显示当前命令行运行的环境\r\nphp artisan --env\r\n// -v|vv|vvv 通过增加 v 的个数来控制命令行输出内容的详尽情况: 1 个代表正常输出, 2 个代表输出更多消息, 3 个代表调试\r\nphp artisan --verbose\r\n// 移除编译优化过的文件 (storage/frameworks/compiled.php)\r\nphp artisan clear-compiled\r\n// 显示当前框架运行的环境\r\nphp artisan env\r\n// 显示某个命令的帮助信息\r\nphp artisan help\r\n// 显示所有可用的命令\r\nphp artisan list\r\n// 进入应用交互模式\r\nphp artisan tinker\r\n// 配合 dump() 函数调试数据\r\nphp artisan dump-server\r\n// 进入维护模式\r\nphp artisan down\r\n// 退出维护模式\r\nphp artisan up\r\n// 优化框架性能\r\n // --force    强制编译已写入文件 (storage/frameworks/compiled.php)\r\n // --psr      不对 Composer 的 dump-autoload 进行优化\r\nphp artisan optimize "),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--force")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--psr")]),r._v("]")]),r._v("\r\n// 更改前端预设\r\n// type"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("name (可以是 none, bootstrap, vue, react)\r\nphp artisan preset "),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("options")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--")]),r._v("]")]),r._v(" type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("name\r\n// 启动内置服务器\r\nphp artisan serve\r\n// 更改默认端口\r\nphp artisan serve --port 8080\r\n// 使其在本地服务器外也可正常工作\r\nphp artisan serve --host 0.0.0.0\r\n// 更改应用命名空间\r\nphp artisan app:name namespace\r\n// 清除过期的密码重置令牌\r\nphp artisan auth:clear-resets\r\n\r\n// 清空应用缓存\r\nphp artisan cache:clear\r\n// 移除 key"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("name 对应的缓存\r\nphp artisan cache:forget key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("_")])]),r._v("name ["),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("<")]),r._v("store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(">")])]),r._v(']\r\n// 创建缓存数据库表 migration\r\nphp artisan cache:table\r\n\r\n// 合并所有的配置信息为一个，提高加载速度\r\nphp artisan config:cache\r\n// 移除配置缓存文件\r\nphp artisan config:clear\r\n\r\n// 程序内部调用 Artisan 命令\r\n$exitCode = Artisan::call(\'config:cache\');\r\n// 运行所有的 seed 假数据生成类\r\n // --class      可以指定运行的类，默认是: "DatabaseSeeder"\r\n // --database   可以指定数据库\r\n // --force      当处于生产环境时强制执行操作\r\nphp artisan db:seed [--class[="..."]] [--database[="..."]] [--force]\r\n\r\n// 基于注册的信息，生成遗漏的 events 和 handlers\r\nphp artisan event:generate\r\n// 罗列所有事件和监听器\r\nphp artisan event:list\r\n// 缓存事件和监听器\r\nphp artisan event:cache\r\n// 清除事件和监听器缓存\r\nphp artisan event:clear\r\n\r\n// 生成新的处理器类\r\n // --command      需要处理器处理的命令类名字\r\nphp artisan handler:command [--command="..."] name\r\n// 创建一个新的时间处理器类\r\n // --event        需要处理器处理的事件类名字\r\n // --queued       需要处理器使用队列话处理的事件类名字\r\nphp artisan handler:event '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v('--event="..."')]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--queued")]),r._v("]")]),r._v(' name\r\n\r\n// 生成应用的 key（会覆盖）\r\nphp artisan key:generate\r\n\r\n// 发布本地化翻译文件到 resources 文件下\r\n// locales: 逗号分隔，如 zh_CN,tk,th [默认是: "all"]\r\nphp artisan lang:publish '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("options")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--")]),r._v("]")]),r._v(" ["),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("<")]),r._v("locales")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(">")])]),r._v("]\r\n\r\n// 创建用户认证脚手架\r\nphp artisan make:auth\r\n// 创建 Channel 类\r\nphp artisan make:channel name\r\n// 在默认情况下, 这将创建未加入队列的自处理命令\r\n // 通过 --handler 标识来生成一个处理器, 用 --queued 来使其入队列.\r\nphp artisan make:command "),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--handler")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--queued")]),r._v("]")]),r._v(' name\r\n// 创建一个新的 Artisan 命令\r\n //  --command     命令被调用的名称。 (默认为: "command:name")\r\nphp artisan make:console [--command[="..."]] name\r\n// 创建一个新的资源控制器\r\n // --plain      生成一个空白的控制器类\r\nphp artisan make:controller [--plain] name\r\nphp artisan make:controller App\\\\Admin\\\\Http\\\\Controllers\\\\DashboardController\r\n// 创建一个新的事件类\r\nphp artisan make:event name\r\n// 创建异常类\r\nphp artisan make:exception name\r\n// 创建模型工厂类\r\nphp artisan make:factory name\r\n// 创建一个队列任务文件\r\nphp artisan make:job \r\n// 创建一个监听者类\r\nphp artisan make:listener name\r\n// 创建一个新的邮件类\r\nphp artisan make:mail name\r\n// 创建一个新的中间件类\r\nphp artisan make:middleware name\r\n// 创建一个新的迁移文件\r\n // --create     将被创建的数据表.\r\n // --table      将被迁移的数据表.\r\nphp artisan make:migration [--create[="..."]] [--table[="..."]] name\r\n// 创建一个新的 Eloquent 模型类\r\nphp artisan make:model User\r\nphp artisan make:model Models/User\r\n// 新建一个消息通知类\r\nphp artisan make:notification TopicRepliedNotification\r\n// 新建一个模型观察者类\r\nphp artisan make:observer UserObserver\r\n// 创建授权策略\r\nphp artisan make:policy PostPolicy\r\n// 创建一个新的服务提供者类\r\nphp artisan make:provider name\r\n// 创建一个新的表单请求类\r\nphp artisan make:request name\r\n// 创建一个 API 资源类\r\nphp artisan make:resource name\r\n// 新建验证规则类\r\nphp artisan make:rule name\r\n// 创建模型脚手架\r\n// '),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("<")]),r._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(">")])]),r._v(' 模型名称，如 Post\r\n// -s, --schema=SCHEMA 表结构如：--schema="title:string"\r\n// -a, --validator[=VALIDATOR] 表单验证，如：--validator="title:required"\r\n// -l, --localization[=LOCALIZATION] 设置本地化信息，如：--localization="key:value"\r\n// -b, --lang[=LANG] 设置本地化语言 --lang="en"\r\n// -f, --form[=FORM] 使用 Illumintate/Html Form 来生成表单选项，默认为 false\r\n// -p, --prefix[=PREFIX] 表结构前缀，默认 false\r\nphp artisan make:scaffold  '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("options")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--")]),r._v("]")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("<")]),r._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(">")])]),r._v('\r\n// 生成数据填充类\r\nphp artisan make:seeder\r\n// 生成测试类\r\nphp artisan make:test\r\n\r\n// 数据库迁移\r\n // --database   指定数据库连接（下同）\r\n // --force      当处于生产环境时强制执行，不询问（下同）\r\n // --path       指定单独迁移文件地址\r\n // --pretend    把将要运行的 SQL 语句打印出来（下同）\r\n // --seed       Seed 任务是否需要被重新运行（下同）\r\nphp artisan migrate [--database[="..."]] '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--force")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v('--path[="..."')]),r._v("]")]),r._v("] "),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--pretend")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--seed")]),r._v("]")]),r._v('\r\n// 创建迁移数据库表\r\nphp artisan migrate:install [--database[="..."]]\r\n// Drop 所有数据表并重新运行 Migration\r\nphp artisan migrate:fresh\r\n// 重置并重新运行所有的 migrations\r\n // --seeder     指定主 Seeder 的类名\r\nphp artisan migrate:refresh [--database[="..."]] '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--force")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--seed")]),r._v("]")]),r._v(' [--seeder[="..."]]\r\n// 回滚所有的数据库迁移\r\nphp artisan migrate:reset [--database[="..."]] '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--force")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--pretend")]),r._v("]")]),r._v('\r\n// 回滚最最近一次运行的迁移任务\r\nphp artisan migrate:rollback [--database[="..."]] '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--force")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("--pretend")]),r._v("]")]),r._v('\r\n// migrations 数据库表信息\r\nphp artisan migrate:status\r\n\r\n// 为数据库消息通知创建一个表迁移类\r\nphp artisan notifications:table\r\n// 清除缓存的 bootstrap 文件\r\nphp artisan optimize:clear\r\n// 扩展包自动发现\r\nphp artisan package:discover\r\n\r\n// 为队列数据库表创建一个新的迁移\r\nphp artisan queue:table\r\n// 监听指定的队列\r\n // --queue      被监听的队列\r\n // --delay      给执行失败的任务设置延时时间 (默认为零: 0)\r\n // --memory     内存限制大小，单位为 MB (默认为: 128)\r\n // --timeout    指定任务运行超时秒数 (默认为: 60)\r\n // --sleep      等待检查队列任务的秒数 (默认为: 3)\r\n // --tries      任务记录失败重试次数 (默认为: 0)\r\nphp artisan queue:listen [--queue[="..."]] [--delay[="..."]] [--memory[="..."]] [--timeout[="..."]] [--sleep[="..."]] [--tries[="..."]] [connection]\r\n// 查看所有执行失败的队列任务\r\nphp artisan queue:failed\r\n// 为执行失败的数据表任务创建一个迁移\r\nphp artisan queue:failed-table\r\n// 清除所有执行失败的队列任务\r\nphp artisan queue:flush\r\n// 删除一个执行失败的队列任务\r\nphp artisan queue:forget\r\n// 在当前的队列任务执行完毕后, 重启队列的守护进程\r\nphp artisan queue:restart\r\n// 对指定 id 的执行失败的队列任务进行重试(id: 失败队列任务的 ID)\r\nphp artisan queue:retry id\r\n// 指定订阅 Iron.io 队列的链接\r\n // queue: Iron.io 的队列名称.\r\n // url: 将被订阅的 URL.\r\n // --type       指定队列的推送类型.\r\nphp artisan queue:subscribe [--type[="..."]] queue url\r\n// 处理下一个队列任务\r\n // --queue      被监听的队列\r\n // --daemon     在后台模式运行\r\n // --delay      给执行失败的任务设置延时时间 (默认为零: 0)\r\n // --force      强制在「维护模式下」运行\r\n // --memory     内存限制大小，单位为 MB (默认为: 128)\r\n // --sleep      当没有任务处于有效状态时, 设置其进入休眠的秒数 (默认为: 3)\r\n // --tries      任务记录失败重试次数 (默认为: 0)\r\nphp artisan queue:work [--queue[="..."]] '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--daemon")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v('--delay[="..."')]),r._v("]")]),r._v("] "),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--force")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v('--memory[="..."')]),r._v("]")]),r._v('] [--sleep[="..."]] [--tries[="..."]] [connection]\r\n\r\n// 生成路由缓存文件来提升路由效率\r\nphp artisan route:cache\r\n// 移除路由缓存文件\r\nphp artisan route:clear\r\n// 显示已注册过的路由\r\nphp artisan route:list\r\n\r\n// 运行计划命令\r\nphp artisan schedule:run\r\n\r\n// 为 session 数据表生成迁移文件\r\nphp artisan session:table\r\n// 创建 "public/storage" 到 "storage/app/public" 的软链接\r\nphp artisan storage:link\r\n\r\n// 从 vendor 的扩展包中发布任何可发布的资源\r\n // --force        重写所有已存在的文件\r\n // --provider     指定你想要发布资源文件的服务提供者\r\n // --tag          指定你想要发布标记资源.\r\nphp artisan vendor:publish '),e("span",{pre:!0,attrs:{class:"token url"}},[r._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[r._v("--force")]),r._v("] ["),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v('--provider[="..."')]),r._v("]")]),r._v('] [--tag[="..."]]\r\nphp artisan tail [--path[="..."]] [--lines[="..."]] [connection]\r\n\r\n// 缓存视图文件以提高效率\r\nphp artisan view:cache\r\n// 清除视图文件缓存\r\nphp artisan view:clear')])])]),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[r._v("$environment = app()->environment();\r\n$environment = App::environment();\r\n// 判断当环境是否为 local\r\nif (app()->environment('local')){}\r\n// 判断当环境是否为 local 或 staging...\r\nif (app()->environment(['local', 'staging'])){}")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);